import numpy as np

from quantuminspire.qiskit import QI
from coreapi.auth import BasicAuthentication
from quantuminspire.credentials import save_account

from qiskit import QuantumCircuit, assemble, Aer, execute
from qiskit.circuit import QuantumRegister, ClassicalRegister, QuantumCircuit

def m_test(inp_backend, shots):
    q = QuantumRegister(1)
    b = ClassicalRegister(1)
    circuit = QuantumCircuit(q, b)
    circuit.initialize([1,0],0)
    circuit.measure(q[0], b[0])
    qi_job = execute(circuit, backend=inp_backend, shots=shots)
    qi_result= qi_job.result()
    return qi_result.get_counts()['0']/shots
def x_test(inp_backend,shots):
    q = QuantumRegister(1)
    b = ClassicalRegister(1)
    circuit = QuantumCircuit(q, b)
    circuit.initialize([1,0],0)
    circuit.x(0)
    circuit.measure(q[0], b[0])
    qi_job = execute(circuit, backend=inp_backend, shots=shots)
    qi_result = qi_job.result()
    return qi_result.get_counts()['1']/shots
def y_test(inp_backend,shots):
    q = QuantumRegister(1)
    b = ClassicalRegister(1)
    circuit = QuantumCircuit(q, b)
    circuit.initialize([1,0],0)
    circuit.y(0)
    circuit.measure(q[0], b[0])
    qi_job = execute(circuit, backend=inp_backend, shots=shots)
    qi_result = qi_job.result()
    return (qi_result.get_counts()['1']/shots)
def h_test(inp_backend,shots):
    q = QuantumRegister(1)
    b = ClassicalRegister(1)
    circuit = QuantumCircuit(q, b)
    circuit.initialize([1,0],0)
    circuit.h(0)
    circuit.measure(q[0], b[0])
    qi_job =execute(circuit, backend=inp_backend, shots=shots)
    qi_result = qi_job.result()
    return (1-np.abs(0.5-(qi_result.get_counts()['0']/shots)))
def z_test(inp_backend,shots):
    q = QuantumRegister(1)
    b = ClassicalRegister(1)
    circuit = QuantumCircuit(q, b)
    circuit.initialize([1,0],0)
    circuit.h(0)
    circuit.z(0)
    circuit.h(0)
    circuit.measure(q[0], b[0])
    qi_job = execute(circuit, backend=inp_backend, shots=shots)
    qi_result = qi_job.result()
    return (qi_result.get_counts()['1']/shots)
def cz_test(inp_backend,shots):
    q = QuantumRegister(2)
    b = ClassicalRegister(2)
    circuit = QuantumCircuit(q, b)
    circuit.initialize([1,0],0)
    circuit.initialize([1,0],1)
    circuit.x(0)
    circuit.h(1)
    circuit.cz(0,1)
    circuit.h(1)
    circuit.measure(q[0], b[0])
    circuit.measure(q[1], b[1])
    qi_job = execute(circuit, backend=inp_backend, shots=shots)
    qi_result = qi_job.result()
    return (qi_result.get_counts()['11']/shots)
def cx_test(inp_backend,shots):
    q = QuantumRegister(2)
    b = ClassicalRegister(2)
    circuit = QuantumCircuit(q, b)
    circuit.initialize([1,0],0)
    circuit.initialize([1,0],1)
    circuit.x(0)
    circuit.cx(0,1)
    circuit.measure(q[0], b[0])
    circuit.measure(q[1], b[1])
    qi_job = execute(circuit, backend=inp_backend, shots=shots)
    qi_result = qi_job.result()
    return (qi_result.get_counts()['11']/shots)
def cy_test(inp_backend,shots):
    q = QuantumRegister(2)
    b = ClassicalRegister(2)
    circuit = QuantumCircuit(q, b)
    circuit.initialize([1,0],0)
    circuit.initialize([1,0],1)
    circuit.x(0)
    circuit.cy(0,1)
    circuit.measure(q[0], b[0])
    circuit.measure(q[1], b[1])
    qi_job = execute(circuit, backend=inp_backend, shots=shots)
    qi_result = qi_job.result()
    return (qi_result.get_counts()['11']/shots)
def swap_test(inp_backend,shots):
    q = QuantumRegister(2)
    b = ClassicalRegister(2)
    circuit = QuantumCircuit(q, b)
    circuit.initialize([1,0],0)
    circuit.initialize([1,0],1)
    circuit.x(0)
    circuit.cx(0,1)
    circuit.measure(q[0], b[0])
    circuit.measure(q[1], b[1])
    qi_job = execute(circuit, backend=inp_backend, shots=shots)
    qi_result = qi_job.result()
    return (qi_result.get_counts()['11']/shots)
